

const kandidat_a = {
    "trust": 151567863,
    "anger": 28032220,
    "anticipation": 64306245,
    "disgust": 88202613,
    "fear": 36485325,
    "joy": 113108523,
    "sadness": 47805349,
    "surprise": 85178566
  }

  const candidat_b = {
    "trust": 75035605,
    "anger": 13718203,
    "anticipation": 31493375,
    "disgust": 49655958,
    "fear": 17998034,
    "joy": 55102129,
    "sadness": 23111496,
    "surprise": 41228577
  }

hitung prosentase dua kandaidat tersebut jika disandingkan menggunakan formula 
P (A U B) = P (A) + P (B) - P (A ∩ B)
P (A ∩ B) = P (A) + P (B) - P (A U B)
dan buatkan hasil baru menggunakan typescript untuk mengukur tingkat kemenangan berupa prosentase dibulatkan tanpa koma
dan hasilnya menggunakan template seperti dibawah ini
const hasil_prosentase_penggabungan = {}



apa nama teori ilmiah yang cocok untuk mengukur kata berikut

candidate
trust
anger
anticipation
disgust
fear
joy
sadness
surprise


kandidat 1
```tsv
anger	disgust	fear	joy	sadness	surprise	trust	anticipation
3	9	2	20	2	11	49	4
```

kandidat 2
```tsv
anger	disgust	fear	joy	sadness	surprise	trust	anticipation
7	9	8	10	10	13	17	26
```

hitunglah prosentase tiap tiap emosi jika kedua kandidat digabungkan




const kandidat_a = {
  "trust": 151567863,
  "anger": 28032220,
  "anticipation": 64306245,
  "disgust": 88202613,
  "fear": 36485325,
  "joy": 113108523,
  "sadness": 47805349,
  "surprise": 85178566
};

const candidat_b = {
  "trust": 75035605,
  "anger": 13718203,
  "anticipation": 31493375,
  "disgust": 49655958,
  "fear": 17998034,
  "joy": 55102129,
  "sadness": 23111496,
  "surprise": 41228577
};

// Find the intersection of emotions for each candidate
const intersection = {};
for (let emotion in kandidat_a) {
  if (emotion !== "candidate") {
    intersection[emotion] = Math.min(kandidat_a[emotion], candidat_b[emotion]);
  }
}

// Find the union of emotions for each candidate
const union = {};
for (let emotion in kandidat_a) {
  if (emotion !== "candidate") {
    union[emotion] = kandidat_a[emotion] + candidat_b[emotion] - intersection[emotion];
  }
}

// Calculate the percentages and store them in a new object
const hasil_prosentase_penggabungan = {};
for (let emotion in union) {
  hasil_prosentase_penggabungan[emotion] = ((union[emotion] / 2) / union[emotion]) * 100;
}

console.log(hasil_prosentase_penggabungan);




const hasilProsentasePenggabungan = {};

// Menghitung persentase tiap emosi dari kedua kandidat
Object.keys(kandidatA).forEach(key => {
  if (key !== "candidate") {
    const persentaseA = kandidatA[key] / Object.values(kandidatA).slice(1).reduce((a, b) => a + b) * 100;
    const persentaseB = kandidatB[key] / Object.values(kandidatB).slice(1).reduce((a, b) => a + b) * 100;
    const persentaseGabungan = persentaseA + persentaseB - (persentaseA * persentaseB / 100);
    hasilProsentasePenggabungan[key] = Math.round(persentaseGabungan);
  }
});

console.log(hasilProsentasePenggabungan);



const hasilProsentasePenggabungan = {};

// Menghitung persentase tiap emosi dari kedua kandidat
Object.keys(kandidatA).forEach(key => {
  if (key !== "candidate") {
    const persentaseA = kandidatA[key] / Object.values(kandidatA).slice(1).reduce((a, b) => a + b) * 100;
    const persentaseB = kandidatB[key] / Object.values(kandidatB).slice(1).reduce((a, b) => a + b) * 100;
    const persentaseGabungan = persentaseA + persentaseB - (persentaseA * persentaseB / 100);
    hasilProsentasePenggabungan[key] = Math.round(persentaseGabungan);
  }
});

console.log(hasilProsentasePenggabungan);


urutkan sesuai urutan yang benar dan klasifikasikan sesuai dengan negative, positive dan neutrall

trust
anger
anticipation
disgust
fear
joy
sadness
surprise


sum masing masing item dibawah ini mendadi single objenct 
const listData = [
  {
    anger: 66135,
    anticipation: 245644,
    disgust: 85030,
    fear: 75583,
    joy: 94478,
    sadness: 94478,
    surprise: 122822,
    trust: 160613
  },
  {
    anger: 20765,
    anticipation: 62296,
    disgust: 124592,
    fear: 51914,
    joy: 446456,
    sadness: 103827,
    surprise: 124592,
    trust: 103827
  },
  {
    anger: 18899,
    anticipation: 18899,
    disgust: 18899,
    fear: 18899,
    joy: 157488,
    sadness: 18899,
    surprise: 94493,
    trust: 283478
  },
  {
    anger: 69765,
    anticipation: 39866,
    disgust: 109631,
    fear: 49832,
    joy: 328892,
    sadness: 119597,
    surprise: 69765,
    trust: 209295
  },
  {
    anger: 7136,
    anticipation: 28542,
    disgust: 121305,
    fear: 7136,
    joy: 271152,
    sadness: 85627,
    surprise: 128440,
    trust: 64220
  }
]

hasilnya singgle object seperti dibawah ini
const hasil = {}


const kandidat1 = {
  trust: 25.17,
  joy: 19.18,
  surprise: 14.22,
  anticipation: 10.65,
  sadness: 7.96,
  fear: 5.99,
  anger: 4.56,
  disgust: 12.26,
  candidate1: 1,
  candidate2: 2
}

const kandidat2 = {
  trust: 25.2,
  joy: 18.87,
  surprise: 14.34,
  anticipation: 10.54,
  sadness: 7.91,
  fear: 6.02,
  anger: 4.65,
  disgust: 12.45,
  candidate1: 1,
  candidate2: 7
}

hitunglah penggabungan dan irisan kedua kandidat tersebut dan disesuaikan dengan teori Naive Bayes


hitung juga jika dedua kandidat telah mempunyai tingkat popularitas jika menjadi calon presiden atau wakil presiden

const popularitas_kandidat1 = {
  calon_presiden: 70,
  calon_wakil_presiden: 30
}
const popularitas_kandidat2 = {
  calon_presiden: 10,
  calon_wakil_presiden: 90
}


hitung ulang jika nilai emosinya berubah

const kandidat1 = {
  trust: 25.17,
  joy: 19.18,
  surprise: 14.22,
  anticipation: 10.65,
  sadness: 7.96,
  fear: 5.99,
  anger: 4.56,
  disgust: 12.26
}

const kandidat2 = {
  trust: 25.2,
  joy: 18.87,
  surprise: 14.34,
  anticipation: 10.54,
  sadness: 7.91,
  fear: 6.02,
  anger: 4.65,
  disgust: 12.45
}


lanjutkan semua item sesuai dengan animasi pada https://animate.style
const listAnimation = {
  animate__bounce: "animate__bounce",
  animate__flash: "animate__flash",
  animate__pulse: "animate__pulse"
}


kurangi masing masing dari data_item dan jika di sum maka hasilnya sama persis dengan nilai_total

const nilai_total = 8773

hilangkan item keagamaan dari array dengan lodash
const data_item = [
  { name: 'pendidikan', value: 8773 },
  { name: 'infrastruktur', value: 12085 },
  { name: 'layanan_kesehatan', value: 642 },
  { name: 'keagamaan', value: 126763 },
  { name: 'kemiskinan', value: 119291 },
  { name: 'lapangan_pekerjaan', value: 30329 },
  { name: 'keadilan_sosial', value: 53391 }
]



jika ada data seperti dibawah berikut 

// data emosi candidate 1
const emotion_candidate_1 = {
  anger: 3,
  anticipation: 4,
  disgust: 9,
  fear: 2,
  joy: 20,
  sadness: 2,
  trust: 49,
  surprise: 11
}

// data emosi candidate 2
const emotion_candidate_2 = {
  anger: 10,
  anticipation: 9,
  disgust: 4,
  fear: 7,
  joy: 40,
  sadness: 20,
  trust: 7,
  surprise: 20
}

// potension candidate jika menjadi presiden atau wakil presiden
const potensi_candidate_1 = { president: 90, vice_president: 30 }

// potension candidate jika menjadi presiden atau wakil presiden
const potensi_candidate_2 = { president: 40, vice_president: 60 }

gabungkan kedua kandidat membentuk objek baru 
dan hasilkan objek baru hasil dari penggabungan tersebut permasing masing item 
seperti dibawah berikut
dan jika disum atau di total nilai dari nilai item akan menghasilkan 100% 

const hasil_emotion_candidate1_dan_candidate2 = {
  anger: ,
  anticipation: ,
  disgust: ,
  fear: ,
  joy: ,
  sadness: ,
  trust: ,
  surprise: 
}


urutkan berdasarkan positive , neutrall, negative
berdasarkan teory sentiment , beserta warnanya

1 trust
2 joy
3 surprise
4 anticipation
5 sadness
6 fear
7 anger
8 disgust